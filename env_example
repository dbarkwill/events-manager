# Docker user and group ids
# On linux these should match your ids
USER_ID=1000
GROUP_ID=1000

# You would typically use rake secret to generate a secure token. It is
# critical that you keep this value private in production.
# To generate the token, run docker compose run --rm --no-deps web bundle exec rake secret
SECRET_TOKEN=

# Unicorn is more than capable of spawning multiple workers, and in production
# you would want to increase this value above 1. 10 has been tested and seems
# to be a good value
WORKER_PROCESSES=10

# This will be the address and port that Unicorn binds to. The only real
# reason you would ever change this is if you have another service running
# that must be on port 8010. Port 8010 is only mapped through to NGINX
LISTEN_ON=0.0.0.0:8010

# This is how we'll connect to PostgreSQL. Change the DATABASE_PW below to 
# a secure value. Anything that needs to connect to the database will reference
# the password below, so it only needs set in this one location.
DATABASE_PW=

# No changes are necessary to the Database URL below.
DATABASE_URL=postgresql://event_manager:${DATABASE_PW}@db:5432/event_manager?encoding=utf8&pool=5&timeout=5000


# Both of these values are using the same Redis address. Nothing needs changed.
CACHE_URL=redis://redis:6379/0
JOB_WORKER_URL=redis://redis:6379/0
REDIS_URL=redis://redis:6379

# Portainer Admin Password. Only used for display within the app, does not change when updated.
PORTAINER_PW=

# Portainer Admin Password Hash 
# Can be generated by the following: docker run --rm httpd:2.4-alpine htpasswd -nbB admin '<password>' | cut -d ":" -f 2 
# You must escape any '$' with an additional '$'
PORTAINER_PW_HASH=

# Setting to run the server in prodution mode. Supresses error messages and increases performance.
# Comment out to run in default (development) mode.
RAILS_ENV=production

# Controls where log files are logged to. For a container, you typically want to log them to STDOUT
# so they are available from the console within docker.
RAILS_LOG_TO_STDOUT=true
